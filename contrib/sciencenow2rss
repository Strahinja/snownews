#!/usr/bin/perl
# 
# sciencenow2rss by Pieter Edelman
# Generated by script4rss (http://script4rss.sf.net)
# 
# This script converts http://sciencenow.sciencemag.org/  to an RSS feed
# 
# ==============================================================================
# This script attempts to convert the sciencenow homepage to an RSS feed
# Have fun!
# ==============================================================================
# 
# Copyright(c) 2004 
# Released under the terms of the GNU General Public License (GPL) Version 2.
# See http://www.gnu.org/ for details.

# UNTESTED AS OF 2017
# Instructions: 

sub fixHTML {
  # Close open tags before new ones are opened
  # Rewrite everything within < and > with a fixed number of dashes
  local($clean_string, $line, $in_tag);
  
  $in_tag = 0;
  
  $clean_string = "";
  split/([<>])/, $_[0];
  while (scalar(@_)) {
    $line = shift(@_);
    if ($line =~ /^<$/) {
      if ($in_tag) {
        $clean_string .= ">";
      }
      $in_tag = 1;
      $clean_string = $clean_string.$line;
      $line = shift(@_);
      $line =~ s/\s*=\s*/=/g;
      $line =~ s/\s+/ /g;
    } elsif ($line =~ /^>$/) {
      $in_tag = 0;
    }
    $clean_string = $clean_string.$line;
  };
  $clean_string;
}

sub cleanup {
  # Convert HTML entries into valid HTML
  #$_[0] =~ s/&(?!\S*;)/&amp;/g;
  $_[0] =~ s/&/&amp;/g;
  $_[0] =~ s/</&lt;/g;
  $_[0] =~ s/>/&gt;/g;
  $_[0];
}

# Read lines from stdin
@lines = <>;

# Print the header
print "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
print "<!DOCTYPE rss PUBLIC \"-//Netscape Communications//DTD RSS 0.91//EN\"\n";
print "\"http://my.netscape.com/publish/formats/rss-0.91.dtd\">\n";
print "<rss version=\"0.91\">\n";
print "  <channel>\n";
print "    <title>ScienceNOW</title>\n";
print "    <link>http://sciencenow.sciencemag.org/ </link>\n";

# Keep reading lines until they are all used
while (scalar(@lines) > 0) {
  $line = &fixHTML(shift(@lines));

  # Find the stories
  if ($line =~ m/\s*<td width=\"32\" valign=\"top\"><a href=\".*<img src=\"\/icons\/newhome\/arrow_red_lgS.gif\" .*?><\/a><\/td>/i) {
    # Skip to the first occurence of /<td width=\"298\"/
    while ($line !~ m/<td width=\"298\"/) {
      $line = &fixHTML(shift(@lines));
    }
    # Create a line up until /.*<\/tr>/ is found
    while ($line !~ m/.*<\/tr>/) {
      chomp($line);
      $line .= &fixHTML(shift(@lines));
    }
    # Find the different parts
    @match = (split/<a href=\"(.*)\" style=\"text-decoration:none\">(.*)<\/a>.*<font size=\"2\">(.*)\s*<\/font>\s*&nbsp;<font size=2 color=\"#888888\"><b><nobr>/, $line);
    # Print out the item
    if (scalar(@match) > 1) {
      print "    <item>\n";
      print '      <title>'.&cleanup($match[2]).'</title>'."\n";
      print '      <link>http://sciencenow.sciencemag.org'.&cleanup($match[1]).'</link>'."\n";
      print '      <description>'.&cleanup($match[3]).'</description>'."\n";
      print "    <\/item>\n";
    }
  }
  # Find the stories
  elsif ($line =~ m/\s*<IMG SRC=\"\/feature\/images\//i) {
    # Create a line up until /.*<HR>/ is found
    while ($line !~ m/.*<HR>/) {
      chomp($line);
      $line .= &fixHTML(shift(@lines));
    }
    # Find the different parts
    @match = (split/<IMG SRC=\"\/feature\/images\/(.*)\" WIDTH=\".*font size=\"2\"><B>(.*)<\/b><\/font>\s*(.*)\s*<br>/, $line);
    # Print out the item
    if (scalar(@match) > 1) {
      print "    <item>\n";
      print '      <title>IMAGE: '.&cleanup($match[2]).'</title>'."\n";
      print '      <link>http://sciencenow.sciencemag.org/</link>'."\n";
      print '      <description>&lt;p&gt;&lt;img src="http://sciencenow.sciencemag.org/feature/images/'.&cleanup($match[1]).'"&gt;&lt;/p&gt;&lt;p&gt;'.&cleanup($match[3]).'</description>'."\n";
      print "    <\/item>\n";
    }
  }
}

# Print the footer
print "  <\/channel>\n";
print "<\/rss>\n";

