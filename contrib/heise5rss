#!/usr/bin/perl

use Data::Dumper;
use XML::LibXML;

# this is the filter script heise5rss, which converts Heise atom-1.0 feeds to
# RSS feeds that include the article linked in the URL part of each item of
# the atom feed. Downloading every article of course takes quite some time..
# Example Source-URL is http://www.heise.de/newsticker/heise-atom.xml

# NO MAINTAINER
# NO LICENSE (claims PD)
# UNTESTED AS OF 2017
# Instructions: 

my @lines = <>;
my $line;
my $inItem = 0;
my %item;

my $base = "http://www.heise.de";
my $title = "Heise news";
my $description = "";

foreach $line (@lines) {
    chomp $line;
    $line =~ s/(\s+)//;
    if( 1 == $inItem ) {
        if( $line eq "</entry>" ) {
#           print "$item{'link'} : $item{title} : $item{'content'}\n";
            my %temp = %item;
            push(@DB,\%temp);
            $inItem = 0;
            %item = ();
            next;
        }
        if( $line =~ /<title>(.*)<\/title>/ ) {
#           print "----------NEW TITLE: $1-------------\n";
            $item{'title'} = $1;
            next;
        }
        if( $line =~ /<updated>(\d+-\d+-\d+T\d+:\d+:\d+)(\+\d+:\d+)?<\/updated>/ ) {
            $item{'date'} = $1;
            next;
        }
        if( $line =~ /<link href="(.*)\/from\/atom10" \/>/ ) {
            $item{'link'} = $1;
            # now download the article as content
            my @clines = `curl -s $item{'link'}`;
            my $content = "";
            my $inArticle = 0;
            foreach(@clines) {
                if( 1 == $inArticle ) {
                    if( $_ =~ /<!-- AUTHOR-DATA-MARKER-BEGIN -->/ ) {
                        $inArticle = 0;
                        break;
                    }
                    $_ =~ s/<a href="\//<a href="$base\//;
                    $_ =~ s/<img src="\//<img src="$base\//;
                    $content .= $_;
                } elsif( $_ =~ /<div class="meldung_wrapper">/ ) {
                    $inArticle = 1;
                }
            }
            $item{'content'} = "$content";
            next;
        }
    } else {
        if( $line =~ /<title>(.*)<\/title>/ ) {
            $title = $1;
            next;
        }
        if( $line =~ /<subtitle>(.*)<\/subtitle>/ ) {
            $description = $1;
            next;
        }
        if( $line eq "<entry>" ) {
            $inItem = 1;
            next;
        }
    }
}

# Create XML
my $nsrss = "http://purl.org/rss/1.0/";
my $nsrdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
my $nsdc = "http://purl.org/dc/elements/1.1/";
my $doc = XML::LibXML::Document->new();
my $text;
my $root = $doc->createElement('RDF');
$root->setNamespace($nsrss, '', 0);
$root->setNamespace($nsrdf, 'rdf', 1);
$root->setNamespace($nsdc, 'dc', 0);
$doc->setDocumentElement($root);
$doc->setEncoding("UTF-8");
my($channel) = $doc->createElement('channel');
$channel->setAttribute('rdf:about', "$base");
$root->appendChild($channel);
$channel->appendTextChild('title', $title);
$channel->appendTextChild('link', "$base");
$channel->appendTextChild('description', $description);
my($channelitems) = $doc->createElement('items');
$channel->appendChild($channelitems);
my($seqitems) = $doc->createElement('rdf:Seq');
$channelitems->appendChild($seqitems);

foreach (@DB) {
        my $rssurl = $_->{'link'};
        my($li) = $doc->createElement('rdf:li');
        $li->setAttribute('rdf:resource', "$rssurl");
        $seqitems->appendChild($li);

        my($rssitem) = $doc->createElement('item');
        $rssitem->setAttribute('rdf:about', "$rssurl");
        $root->appendChild($rssitem);
        $rssitem->appendTextChild('link', $_->{'link'});
        $rssitem->appendTextChild('title', $_->{'title'});
#       $rssitem->appendTextChild('guid', $_->{'guid'});
        $rssitem->appendTextChild('description', $_->{'content'});
        $rssitem->appendTextChild('dc:date', $_->{'date'});
}

print $doc->serialize(1);
