#!/usr/bin/perl

#    This is a filter script heise4rss by Matthias BÃ¤rwolf, turning heise's front page into a proper rss feed, for theirs is whack.
#    It is largely based on heise3rss by Lars Lindner, Balazs Melikant, Mathis Dirksen-Thedens. I have changed their script in but minor ways. 
#    The update to their script was necesary, for heise every now and then changes their html, srewing with the script's operation.


#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#    Please refer to http://www.gnu.org/licenses/gpl.txt for the GNU General Public License that applies to this program.

# UNTESTED AS OF 2017
# Instructions: 

my($contentblock) = 0;
my($what) = 0;
my(@news);

my %urls_heads = ();
my @lines = <>;

# get last article number
my $lastnr = `cat ~/.liferea/.heise3rss-last-nr 2>/dev/null`;
if ($lastnr =~ /^(\d+)$/) {
        $lastnr = $1;
} else {
	$lastnr = 0;
}

# gather links to article full texts
foreach (@lines) {
	chomp;
	if ($_ eq "<!-- Liste der Meldungen -->") {
		$contentblock = 1;
		next;
	}
	
	if ($_ eq "<!-- &Uuml;berblick -->") {
		last;
	}

	if ($contentblock == 1) {
		if(/^<h3.*<a href=\"(.*)\">(.*)<\/a>/) {
			$urls_heads{$1} = $2
		}
	}
}

# test for curl
`curl --help`;
if($? == 512) {
	# process collected links and get article texts
	foreach my $url (sort keys %urls_heads) {
		$url =~ /meldung\/(\d+)$/;
		if($lastnr < $1) {
			$lastnr = $1;
			@lines = `curl -s http://www.heise.de$url`;
			$contentblock = 0;
			$content = "";
			foreach(@lines) {
				# things to cut out
				s#<img.*?>##i;
				s#<span.*?>Anzeige</span><br>##i;
				s#<script>##i;
				s#<noscript>##i;
#				s#<\!--.*?-->##i;
				# start of relevant block
				if($_ =~ /.*?HEISETEXT.*?/) {
					$contentblock = 1;
					next;
				}
				# skip
				if($_ =~ /.*?bcadv.*?/) {
					$contentblock = 0;
					next;
				}
				if($_ =~ /.*?\/bcadv.*?/) {
					$contentblock = 1;
					next;
				}
				# end of relevant block
				last if($_ =~ /.*?untere\ News.*?/);
				if($contentblock == 1) {
				        # this one's a bit of hack in order to cut the script part from the header
				        ($temp, $temp2) = split /\<script/;
				        # fill content string for items, line by line
					$content .= $temp;
				}
			}
			# stack the individual news
			push(@news, $urls_heads{$url});
			push(@news, $url);
			push(@news, "<![CDATA[$content]]>");
		}
	}
} else {
	push(@news, "Filter script failed! curl not found!");
	push(@news, " ");
	push(@news, "This filter script uses curl to download websites. And it seems like curl is not installed!\n");
}

# print rss feed
print "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n".
	"<rdf:RDF\n".
	"xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n".
	"xmlns:content=\"http://purl.org/rss/1.0/modules/content/\"\n".
	"xmlns=\"http://my.netscape.com/rdf/simple/0.9/\">\n".
	"<channel>\n".
	"  <title>heise online news</title>\n".
	"  <link>http://www.heise.de/newsticker/</link>\n".
	"  <description>Nachrichten aus der Welt des Computers</description>\n".
	"</channel>\n";

$what = 0;
foreach (@news) {
	if ($_ eq "") {
		next;
	}
	if ($what == 0) {
		print "<item>\n<title>$_</title>\n";
		$what = 1;
		next;
	} elsif ($what == 1) {
		print "<link>http://www.heise.de$_</link>\n";
		$what = 2;
		next;
	} else {	
		print "<description>Sorry but your reader must support the content namespace!</description>\n";
		print "<content:encoded>$_</content:encoded>\n</item>\n";
		$what = 0;
	}
}

print "</rdf:RDF>\n";

# write last article number, so that we can start off from there next time around
`test -d ~/.liferea || mkdir ~/.liferea`;
`echo $lastnr > ~/.liferea/.heise3rss-last-nr 2>/dev/null`;



